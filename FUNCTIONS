#!/bin/bash

source /etc/mining.conf

################################################################################

settings_load () {
	if [ ! -f "$MINER_PATH/.mineDefaultCoin" ]; then
#        echo "creating settings file for mine.sh"
		updateTime
		settings_save
	else
# 		echo "loading settings file for mine.sh"
		LAST_COIN_MINED=$(grep LAST_COIN_MINED $MINER_PATH/.mineDefaultCoin | sed -e 's#.*=\(\)#\1#')
		LAST_COIN_STARTED=$(grep LAST_COIN_STARTED $MINER_PATH/.mineDefaultCoin | sed -e 's#.*=\(\)#\1#')
		LAST_COIN_NB=$(grep LAST_COIN_NB $MINER_PATH/.mineDefaultCoin | sed -e 's#.*=\(\)#\1#')
		RESTART_IF_IDLE=$(grep RESTART_IF_IDLE $MINER_PATH/.mineDefaultCoin | sed -e 's#.*=\(\)#\1#')
	fi
}

settings_save () {
	rm -f "$MINER_PATH/.mineDefaultCoin"
		
	echo "LAST_COIN_MINED=$LAST_COIN_MINED" >> "$MINER_PATH/.mineDefaultCoin"
	echo "LAST_COIN_STARTED=$LAST_COIN_STARTED" >> "$MINER_PATH/.mineDefaultCoin"
	echo "LAST_COIN_NB=$LAST_COIN_NB" >> "$MINER_PATH/.mineDefaultCoin"
	
	if [ -z "$RESTART_IF_IDLE" ]; then
		RESTART_IF_IDLE=1
	fi
	echo "RESTART_IF_IDLE=$RESTART_IF_IDLE" >> "$MINER_PATH/.mineDefaultCoin"
}

updateTime ()
{
	LAST_COIN_STARTED=$(date +%s)
}

totalMiningTime ()
{
	END=$(date +%s);
	PERIOD=$((END-LAST_COIN_STARTED))
	date -u -d @${PERIOD} +"%T"
}

saveCoin ()
{
	NEW_COIN_TO_MINE=$1
	LAST=$(grep LAST_COIN_MINED $MINER_PATH/.mineDefaultCoin | sed -e 's#.*=\(\)#\1#')

	if [ "$NEW_COIN_TO_MINE" != "$LAST" ]; then
		echo "Switching to new coin: $NEW_COIN_TO_MINE"
		LAST_COIN_MINED=$NEW_COIN_TO_MINE
		LAST_COIN_STARTED=$(date +%s)
		LAST_COIN_NB=0
	else
		echo "Restarting coin: $NEW_COIN_TO_MINE"
		LAST_COIN_NB=`expr $LAST_COIN_NB + 1`
	fi
	settings_save
}


################################################################################

# devices_with_coma fromIndex numberOfGpusST_CHANGED

function devices_with_coma {
	DEVICES=$1
        for i in $(seq `expr $1 + 1`  `expr $1 + $2 - 1` ); do
                DEVICES="$DEVICES,$i"
        done
	echo $DEVICES
}

################################################################################

launch_miner ()
{
	COIN_TO_MINE=$1
	DEVICES=$2
	DAEMON="$3"

	if [ -z "$COIN_TO_MINE" ]; then
		echo "launch_miner() coin devices   - no coin specified"
		exit 1
	elif [ -z "$DEVICES" ]; then
		echo "launch_miner() coin devices   - no devices specified"
		exit 1
	fi

	DEVICES_SPACES=${DEVICES//,/ }
	DEVICES_COUNT=$(echo $DEVICES_SPACES | wc -w)
	COUNT=${#MINERS[@]}

	for ((i=0; i<$COUNT; i++))
	do
			COIN=${!MINERS[i]:0:1}
			if [ "$COIN" != "$COIN_TO_MINE" ]; then
						continue
			fi

			MINER_DESC="${!MINERS[i]:1:1}"
			MINER_TOUSE="${!MINERS[i]:2:1}"
			MINER_PROTO="${!MINERS[i]:3:1}"
			MINER_SERVER="${!MINERS[i]:4:1}"
			MINER_PORT="${!MINERS[i]:5:1}"
			MINER_USER="${!MINERS[i]:6:1}"
			MINER_PASS="${!MINERS[i]:7:1}"
			

			if [ "$MINER_TOUSE" = "ZMMINER" ]; then
				CMD="$ZMMINER --server $MINER_SERVER --port $MINER_PORT --user $MINER_USER.$HOSTNAME --pass $MINER_PASS --dev $DEVICES_SPACES"
			
			elif [ "$MINER_TOUSE" = "EWFB" ]; then
				# --pec for stats
				CMD="$EWFBMINER --fee 0 --server $MINER_SERVER --port $MINER_PORT --user $MINER_USER.$HOSTNAME --pass $MINER_PASS --cuda_devices $DEVICES_SPACES"
			
			elif [ "$MINER_TOUSE" = "CCMINER" ]; then
				CMD="$CCMINER --retry-pause 1 -a $MINER_PROTO -i $INTENSITY -o stratum+tcp://$MINER_SERVER:$MINER_PORT -u $MINER_USER.$HOSTNAME -p $MINER_PASS -d $DEVICES"
			
			elif [ "$MINER_TOUSE" = "XEVAN_MINER" ]; then
				CMD="$XEVAN_MINER --retry-pause 1 -a $MINER_PROTO -i $INTENSITY -o stratum+tcp://$MINER_SERVER:$MINER_PORT -u $MINER_USER.$HOSTNAME -p $MINER_PASS -d $DEVICES"
			
			elif [ "$MINER_TOUSE" = "CRYPTONIGHT_MINER" ]; then
				CMD="$CRYPTONIGHT_MINER -a $MINER_PROTO -i $INTENSITY -o stratum+tcp://$MINER_SERVER:$MINER_PORT -u $MINER_USER.$HOSTNAME -p $MINER_PASS -d $DEVICES"
			
			elif [ "$MINER_TOUSE" = "BFGMINER" ]; then
				CMD="$BFGMINER -a $MINER_PROTO -o stratum+tcp://$MINER_SERVER:$MINER_PORT -u $MINER_USER.$HOSTNAME -p $MINER_PASS -d $DEVICES"
			
			elif [ "$MINER_TOUSE" = "BMINER" ]; then
				CMD="$BMINER -nofee -no-timestamps -uri stratum://$MINER_USER.$HOSTNAME@$MINER_SERVER:$MINER_PORT -api 127.0.0.1:1880 -devices $DEVICES "
				
			elif [ "$MINER_TOUSE" = "X17_MINER" ]; then
				CMD="$X17_MINER -o stratum+tcp://$MINER_SERVER:$MINER_PORT -u $MINER_USER.$HOSTNAME -p $MINER_PASS -d $DEVICES"
			
			elif [ "$MINER_TOUSE" = "X16_MINER" ]; then
				CMD="$X16_MINER -o stratum+tcp://$MINER_SERVER:$MINER_PORT -u $MINER_USER.$HOSTNAME -p $MINER_PASS -d $DEVICES"
		
				
			elif [ "$MINER_TOUSE" = "ETHMINER" ]; then
				CMD="$ETHMINER -U -SP 1 -S $MINER_SERVER:$MINER_PORT -O $MINER_USER.$HOSTNAME --farm-recheck 1000 -v 2"
			else
				CMD=""
				echo "Unconfigured miner $MINER"
				exit 1
			fi

			saveCoin $COIN
			
			echo "-------------------------------------------------------------------------------"
			printf "Mining ${BOLD}$COIN ${NC} with $DEVICES_COUNT devices ($DEVICES)\n"
			echo "-------------------------------------------------------------------------------"
			mail $EMAIL_NOTIF -s "$HOSTNAME : Mining $COIN ($DEVICES_COUNT GPUS)" <<< "Started mining $COIN with devices $DEVICES"
			echo "$CMD"
			
			if [ "$DAEMON" = "1" ]; then
				/bin/bash -ce "exec $CMD  >> /var/log/mining.log &"
			else
				/bin/bash -ce "exec $CMD "
	# >> /var/log/mining.log"
			fi
	done
}


################################################################################

display_coins () {
	echo "Coins available :"

	for ((i=0; i<$MINERS_COUNT; i++))
 	do
		if [ $i -lt 10 ]; then
			printf " "
		fi

		COINNAME=${!MINERS[i]:0:1}
		DESCRIPTION="${!MINERS[i]:1:1}"
		MINER_PROTO="${!MINERS[i]:3:1}"
		
		printf "${BOLD}%s${NC}\t%s%s" $i 
		printf '%-20s' $COINNAME

		printf '%-30s' "$DESCRIPTION"
		printf '%-20s' "$MINER_PROTO"

		echo ""
	done
   
	printf "\nFor which coin ? [${BOLD}$LAST_COIN_MINED${NC}] : "
}

