#!/bin/bash

export GPU_FORCE_64BIT_PTR=0
export GPU_MAX_HEAP_SIZE=100
export GPU_USE_SYNC_OBJECTS=1
export GPU_MAX_ALLOC_PERCENT=100
export GPU_SINGLE_ALLOC_PERCENT=100


################################################################################
### SCRIPT_DIR is the location the script
SCRIPT_DIR="`dirname \"$0\"`"                 # relative
SCRIPT_DIR="`( cd \"$SCRIPT_DIR\" && pwd )`"  # absolutized and normalized
if [ -z "$SCRIPT_DIR" ] ; then
    # error; for some reason, the path is not accessible
    # to the script (e.g. permissions re-evaled after suid)
    exit 1  # fail
fi

source /etc/mining.conf
source $SCRIPT_DIR/FUNCTIONS

################################################################################


XORG_NBINSTANCES=$(nvidia-smi | grep Xorg | wc -l)
PM_ENABLED=$(nvidia-smi -pm ENABLED | grep already | wc -l)

# first time
if [ "$PM_ENABLED" = "0" ] ; then
    echo "mining: Enabling persistent settings"
    sudo nvidia-smi -pm ENABLED
fi

# no instance yet, start X server on each card
if [ "$XORG_NBINSTANCES" = "0" ] || [ "$XORG_NBINSTANCES" = "1" ]; then
    echo "mining: Starting X servers"
    X :0 &
    # increase for slow HD
    sleep 2
    export DISPLAY=:0
fi

# if override or never enabled
if [ "$OVERCLOCK" = "1" ] || [ "$PM_ENABLED" = "0" ]; then
    $SCRIPT_DIR/overclock
fi

################################################################################

usage()
{
cat << EOF
usage: $0 COIN options

This script builds and mines the various targets

OPTIONS:
   -h      Show this message
   -c      coin
   -i      intensity
   -l      last config
   -d      Devices -d 0,2
   -o      reapply overclock
   -v      Verbose
EOF
}


################################################################################

cd $MINER_PATH

settings_load

################################################################################
# Parse parameters

DEVICES=""
COIN_TO_MINE=""
OVERCLOCK=""

while getopts “hloc:i:d:” OPTION
do
     case $OPTION in
         h)
             usage
             exit 0
             ;;
         d)
             DEVICES="$OPTARG"
             ;;

 	 i)
	     INTENSITY="$OPTARG"
	     ;;

         l)
            COIN_TO_MINE=$DEFAULT_COIN
            ;;
            
         c)
             COIN_TO_MINE=$(echo $OPTARG | tr '[:lower:]' '[:upper:]')
             ;;

	 o)
	    OVERCLOCK="1"
	    ;;

         ?)
             usage
             exit 0
             ;;
     esac
done
 

if [ "$COIN_TO_MINE" = "" ]; then
    
    display_coins
    read ans
    
    if [ "$ans" = "" ]; then
        COIN_TO_MINE=$DEFAULT_COIN
        printf "$DEFAULT_COIN\n\n"
    else
        COIN_TO_MINE=${!MINERS[$ans]:0:1}
        echo ""
    fi
    
    DEFAULT_COIN=$COIN_TO_MINE
fi

settings_save


if [ "$DEVICES" = "" ]; then
    DEVICES="0"
#     for i in {1..$NB_GPUS}; do echo $i; done
    for i in $(seq 1  `expr $NB_GPUS - 1` ); do
        DEVICES="$DEVICES,$i"
    done
fi

DEVICES_SPACES=${DEVICES//,/ }
DEVICES_COUNT=$(echo $DEVICES_SPACES | wc -w)

####


# Loop and print it.  Using offset and length to extract values
COUNT=${#MINERS[@]}
for ((i=0; i<$COUNT; i++))
do
    COIN=${!MINERS[i]:0:1}
    if [ "$COIN" != "$COIN_TO_MINE" ]; then
        continue
    fi
  
    printf "Mining ${BOLD}$COIN${NB} with $DEVICES_COUNT devices ($DEVICES) on $HOSTNAME\n"
    mail $EMAIL_NOTIF -s "$HOSTNAME : Mining $COIN ($DEVICES_COUNT GPUS)" <<< "Started mining $COIN with devices $DEVICES"
    
    MINER_DESC="${!MINERS[i]:1:1}"
    MINER_TOUSE="${!MINERS[i]:2:1}"
    MINER_PROTO="${!MINERS[i]:3:1}"
    MINER_SERVER="${!MINERS[i]:4:1}"
    MINER_PORT="${!MINERS[i]:5:1}"
    MINER_USER="${!MINERS[i]:6:1}"
    MINER_PASS="${!MINERS[i]:7:1}"
  
  

    if [ "$MINER_TOUSE" = "ZM" ]; then

        echo "$ZMMINER --server $MINER_SERVER --port $MINER_PORT --user $MINER_USER.$HOSTNAME --pass $MINER_PASS --dev $DEVICES_SPACES"
        /bin/bash -ce "exec $ZMMINER --server $MINER_SERVER --port $MINER_PORT --user $MINER_USER.$HOSTNAME --pass $MINER_PASS --dev $DEVICES_SPACES"


    elif [ "$MINER_TOUSE" = "EWFB" ]; then
    
	echo "$EWFBMINER --fee 0 --pec  --server $MINER_SERVER --port $MINER_PORT --user $MINER_USER.$HOSTNAME --pass $MINER_PASS --cuda_devices $DEVICES_SPACES"
	/bin/bash -ce "exec $EWFBMINER --fee 0 --server $MINER_SERVER --port $MINER_PORT --user $MINER_USER.$HOSTNAME --pass $MINER_PASS --cuda_devices $DEVICES_SPACES"


    elif [ "$MINER_TOUSE" = "CCMINER" ]; then
    
	echo "$CCMINER -a $MINER_PROTO -i $INTENSITY -o stratum+tcp://$MINER_SERVER:$MINER_PORT -u $MINER_USER.$HOSTNAME -p $MINER_PASS -d $DEVICES" 
	/bin/bash -ce "exec $CCMINER -a $MINER_PROTO -i $INTENSITY -o stratum+tcp://$MINER_SERVER:$MINER_PORT -u $MINER_USER.$HOSTNAME -p $MINER_PASS -d $DEVICES"


    elif [ "$MINER_TOUSE" = "BFGMINER" ]; then

	echo "$BFGMINER -a $MINER_PROTO -o stratum+tcp://$MINER_SERVER:$MINER_PORT -u $MINER_USER.$HOSTNAME -p $MINER_PASS -d $DEVICES" 
	/bin/bash -ce "exec $BFGMINER -a $MINER_PROTO -o stratum+tcp://$MINER_SERVER:$MINER_PORT -u $MINER_USER.$HOSTNAME -p $MINER_PASS -d $DEVICES"
	exit 1
    
    else
        echo "Unconfigured miner $MINER"
        exit 1
    fi
   
    echo "Miner interrupted. restarting"
    sudo service mining restart

    exit 0 
done

echo "Could not handle $COIN_TO_MINE"
exit 1
